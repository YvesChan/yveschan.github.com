<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OpenFlow | Hello YC]]></title>
  <link href="http://YvesChan.github.com/blog/categories/openflow/atom.xml" rel="self"/>
  <link href="http://YvesChan.github.com/"/>
  <updated>2013-09-02T23:12:02+08:00</updated>
  <id>http://YvesChan.github.com/</id>
  <author>
    <name><![CDATA[YvesChan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Software-Defined Networking - Note 3]]></title>
    <link href="http://YvesChan.github.com/blog/software-defined-networking-note-3/"/>
    <updated>2013-09-02T22:41:00+08:00</updated>
    <id>http://YvesChan.github.com/blog/software-defined-networking-note-3</id>
    <content type="html"><![CDATA[<h1>Week 4 - SDN Nuts and Bolts(螺母和螺栓) - Control Plane</h1>

<p>===================</p>

<h2>Learing objectives:</h2>

<ul>
<li>Review how an SDN controller can populate(填充) a switch's forwarding table.</li>
<li>Determine how an SDN controller can be used to control multiple switches in a single network, and why to do so.</li>
<li>Gain experience setting up a controller and basic switch environment.</li>
<li>Understand the design tradeoffs between some of the more commonly used SDN/OpenFlow controllers. (一些广泛使用的控制器之间的设计抉择)</li>
<li>Set up controller in Mininet that can perform basic operations,like switch-table population and firewalling.</li>
</ul>


<h2>Control plane basics</h2>

<h3>Openflow protocol specification(协议规范) (pic in PPT - P6)</h3>

<ul>
<li><p><code>OpenFlow controller</code> communicates with <code>switch</code> over Secure channel</p>

<ul>
<li>OF protocol defines msg format</li>
<li>controller use control channel to update flow table</li>
<li>logic is executed at controller</li>
</ul>
</li>
<li><p><code>Switch components</code> including:</p>

<ul>
<li>flow tables: perform packet lookup, if matching then take <code>action</code>

<ul>
<li>actions: forward, drop, modify, enqueue</li>
<li>flow table format:</li>
</ul>
</li>
</ul>
</li>
</ul>


<pre>
 switch| MAC      |Eth |VLAN|IP               |TCP/UDP
 port  |[src][dst]|type|ID  |[src][dst][proto]|[sport][dport]|action
</pre>


<ul>
<li>secure channel</li>
</ul>


<p>控制器与OF交换机之间通过SSL连接，使用OF协议进行通信，并在交换机上设置和更新流表。交换机只负责根据流表处理数据包，因此所有的逻辑都在控制器。每个数据包协议头部与所有流表(flow table)一一对比，如果匹配则执行相应的操作，如果所有都不匹配则发送到控制器(controller)。</p>

<ul>
<li><code>dpctl</code> Control channel

<ul>
<li>switches default port: 6634</li>
<li>inspect, modify flow table</li>
</ul>
</li>
</ul>


<p>Even in the absence of a controller, we can use dpctl to talk to the switch.</p>

<!-- more -->


<h3>Openflow enhancements(v1.3)</h3>

<ul>
<li>action set: 对每个包执行多个操作</li>
<li>group: a list of action sets. 一个pipeline中包含多个table，每个match的table可以把更新数据包特定域(filed)的操作(action)添加到action set中，在到达出口(output port)前执行所有action set中的action.见P10</li>
</ul>


<h2>SDN controller</h2>

<h2>Using SDN controllers to customize control</h2>

<h3>Hub and learning switch</h3>

<ul>
<li>Hub

<ul>
<li>no forwarding info stored at switch</li>
<li>every input packet is flooded out all ports</li>
</ul>
</li>
</ul>


<p>Start a <code>POX controller</code> by running hub.py. When the POX controller receive a connection request, it send back the msg with modifying flow table entries(flood).</p>

<ul>
<li><p>learning switch(algorithm)</p></li>
<li><p>Important concept: Listener</p></li>
</ul>


<h3>Simple firewall(Important)</h3>

<ul>
<li>performance: cache decisions at switch(把控制器的操作缓存在交换机以提高网络性能)

<ul>
<li>important to limit data traffic to controller</li>
<li>when controller decides to forward or drop, the flow table is modified.</li>
<li>decision is cache at switch until the flow table entry expired</li>
</ul>
</li>
</ul>


<p>当主机A要ping主机B时，第一个数据包的延时会比较大，因为交换机此时还没有flow table，需要把packet转发到controller，等controller根据rules作出转发决定，同时缓存该决定。每一段时间都会有一个icmp包的延时比较大，是因为flow table entry过期，要重复上述操作。</p>

<hr />

<h2>Experiment</h2>

<p><code>sh
$ sudo dhclient eth1
$ sudo mn --topo single,3 --max --switch ovsk --controller remote     # create a simple topologic with 3 hosts &amp; 1 OpenvSwitch
$ pox/pox.py log.level --DEBUG forwarding.hub     # start a pox's hub component
$ dpctl dump-flows tcp:127.0.0.1:6634    # check the flow table in switch
</code></p>

<p>POX工作方式很简单，pox.py文件启动POX，并且后面接上需要载入的模块名字，可以一次接入多个模块，POX会执行模块中的launch()函数并将模块的状态设置为“up”，并且在模块后面可以给模块指定参数的。</p>

<h3>useful API</h3>

<ul>
<li><p>connection.send()</p></li>
<li><p>ofp_action_output(port = ..): a flow table action class.  It specifies a switch port that you wish to send the packet out of.</p></li>
<li><p>ofp_match class</p></li>
<li><p>ofp_packet_out()</p></li>
<li><p>ofp_flow_mod(): OpenFlow modification msg. This instructs a switch to install a flow table entry.</p></li>
</ul>


<h3>firewall behavior</h3>

<ul>
<li>Hash table for storing K/V pairs (switch, src MAC)</li>
<li>drop: if there is a firewall entry maps to "False" or no match entry</li>
<li>forward: match a firewall entry that maps to "True"</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Defined Networking - Note 2]]></title>
    <link href="http://YvesChan.github.com/blog/software-defined-networking-note-2/"/>
    <updated>2013-09-01T21:49:00+08:00</updated>
    <id>http://YvesChan.github.com/blog/software-defined-networking-note-2</id>
    <content type="html"><![CDATA[<h1>Week 3</h1>

<h2>Learning Objectives:</h2>

<ul>
<li>Discover what network virtualization is and why it is used</li>
<li>Identify various ways of implementing virtual networks</li>
<li>Explain why Mininet is useful</li>
<li>Practice how Mininet works</li>
<li>Gain more experience using Mininet, setting up topologies, etc.</li>
</ul>


<h2>Network virtualization</h2>

<h3>definition: Abstraction of the physical network(物理网络的抽象)</h3>

<ul>
<li>support multiple logical networks share a physical substrate(多个逻辑网络共享物理基础设施)</li>
<li>container of network services</li>
</ul>


<h3>Aspects of network virtualization(网络虚拟化的应用层面)</h3>

<ul>
<li>Nodes: VM</li>
<li>Links: Tunnels</li>
<li>Storage</li>
</ul>


<h3>Motivation &amp; Goal</h3>

<ul>
<li>Flexibility</li>
<li>Manageability</li>
<li>Scalability</li>
<li>Security &amp; Isolation</li>
<li>Programmability</li>
<li>Heterogeneity(异质性): 支持不同技术</li>
</ul>


<h3>Virtual switch(虚拟交换技术)</h3>

<p>Mechanism that taking Ethernet frames inside a VM and passing them to the physical interface, which networking VM together over L2 topology.(通过虚拟交换技术将虚拟机连接到二层网络)</p>

<p>Example:
* short-bridge in VINI: extension of Linux bridging(桥接)
* Open vSwitch: can be configured remotely with OpenFlow, json</p>

<h2>Application of virtual networking</h2>

<ul>
<li>Experimental deployments</li>
<li>Isolation on shared infrastructure</li>
<li>Reuse of resource pool</li>
<li>Dynamic scaling</li>
<li>Easier management of logical resources</li>
</ul>


<h2>Virtual network in Mininet</h2>

<h3>Mininet</h3>

<p>difiniton: a <code>virtual network environment</code> that can run on a single PC</p>

<p><em>Mininet</em> VM architecture paradigm(review it in ppt/pdf):</p>

<ol>
<li>lanuch mininet process(mn)</li>
<li>create subprocesses(/bin/bash) &amp; network namespace in per vhost</li>
<li>create virtual ethernet(veth) pairs and assign to namespace(establish tunnel between virtual interface(VHost) and real interface(local).)</li>
<li>create OpenFlow switch to connect vhosts</li>
<li>create OpenFlow controller to control flow table entries in switch through OpenFlow protocol</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Defined Networking - Note 1]]></title>
    <link href="http://YvesChan.github.com/blog/software-defined-networking-note-1/"/>
    <updated>2013-07-13T15:21:00+08:00</updated>
    <id>http://YvesChan.github.com/blog/software-defined-networking-note-1</id>
    <content type="html"><![CDATA[<blockquote><p>SDN (Software-Defined Networking) is an approach to computer networking which abstracts the distributed systems, the control plane and the data plane.</p>

<pre><code>                                                    -- from Wikipedia
</code></pre></blockquote>

<p>刚好coursera的SDN课程开在暑假，总算有个课是想上又有时间上了 = =</p>

<p>这里权当是做个笔记。因为本人英语渣，如果不作笔记的话基本上过了没多久就忘得一干二净了（虽然现在也差不多）。</p>

<p>实话说，课程比较抽象，ppt过了第一遍基本上就云里雾里了，很多地方都是知其然不知其所以然。虽然SDN是针对数据中心网络的技术，但是个人觉得网络硬件在这几年来确实没什么重大的革命（菜鸟我没听说过有咯），而现在各大互联网公司都在抢占用户上网入口，也就是路由器。如果SDN走出学术界，在工业界量产的话，那也算的上是网络硬件的革命了。难怪SDN会被称为Computer Network的X86。当然目前离大规模普及还是长路漫漫啊，具体面临的困难这里略去不表...（表不了啊）</p>

<p>以下内容参照 Coursera 的 <a href="https://class.coursera.org/sdn-001/wiki/view?page=syllabus">SDN open course</a></p>

<!--more-->


<h1>Week 1</h1>

<h2>Active Networks</h2>

<ul>
<li><p>definition: Networks where switches perform custom computations on packets.(交换机在数据包上执行自定义操作的一种网络)</p></li>
<li><p>idea: Message carry procedures &amp; data</p>

<ul>
<li><p>Active routers coexist with legacy routers</p></li>
<li><p>Each programmable switch can perform additional processing</p></li>
</ul>
</li>
<li><p>Two different approaches</p>

<ul>
<li><p>Capsules("integrated")(代码和数据整合到packet中)</p></li>
<li><p>Programmable Switches("discrete")(代码运行在路由器中，数据存储于packet，由header指定运行程序)</p></li>
</ul>
</li>
</ul>


<h2>Network Virtualization</h2>

<ul>
<li><p>definition: Representation of one or more logical network topologies on the same infrastructure.(在同一个基础设施上表现出一个或多个网络拓扑结构)</p></li>
<li><p>motivation: Separate logical network from physical infrastructure, potentially allow users to share the same underlying infrastructure for different purpose.(将逻辑的拓扑结构与物理基础设施分离以实现共享)</p></li>
<li><p>benefits:</p>

<ul>
<li><p>Sharing</p></li>
<li><p>Customizability</p></li>
</ul>
</li>
</ul>


<h1>Week 2</h1>

<h2>Control plane(控制层)</h2>

<ul>
<li><p>definition: Logic for controlling forwarding behavior(控制转发行为的逻辑，类似网络的大脑)</p></li>
<li><p>e.g. routing protocol, network middlebox configuration(firewall,Load Balance)</p></li>
</ul>


<h2>Data plane(数据层)</h2>

<ul>
<li><p>definition: Forward traffic according to control plane logic(根据控制层的逻辑来转发流量)</p></li>
<li><p>e.g. IP forwarding(即三层路由，根据IP地址进行转发), layer-2 switching(根据MAC地址进行转发)</p></li>
</ul>


<h2>Reason for separate thr Control and Data plane</h2>

<ul>
<li><p>Independent evolution and development</p></li>
<li><p>Control from high-level software program:</p></li>
</ul>


<blockquote><p>Once the control plane is separated from data plane, it's a lot easier to control the behavior of the network, because those switches are doing nothing more than just forwarding traffic, and all the smart of network are in the software control.</p></blockquote>

<h2>Challenges from control/data plane separation</h2>

<ul>
<li><p>scalability: routing decisions for many routers</p></li>
<li><p>reliability: correct operation under failure</p></li>
<li><p>consistency: ensuring consistency across multiple control replicas</p></li>
</ul>


<h2>mininet(openflow tutorial)</h2>

<p><strong>mininet</strong> : A network emulation platform that has the ability to create a virtual OpenFlow network; controllers, switches, hosts, and links on a single real or virtual network.</p>

<h3>init</h3>

<p><code>sudo mn --topo single,3 --mac --switch ovsk --controller remote</code></p>

<ul>
<li>sudo mn : This starts mininet. Mininet always requires sudo to run.</li>
<li>--topo single,3 : This tells mininet to start using the topology of a ‘single’ switch and 3 hosts.</li>
<li>--mac : This tells mininet to assign each host a sequential mac address, matching its IP address.</li>
<li>--switch ovsk : This tells mininet that the switches are to be of the type ovsk, this is the type for Openflow,</li>
<li>--controller remote : This tells mininet that each Openflow switch is to talk to a controller, which is located at a remote location.</li>
<li>--link : This sets link parameters, e.g. bw(bandwidth), delay</li>
</ul>


<p>Here's the topology:</p>

<p><img src="http://www.openflow.org/wk/images/c/c6/Three_switch_layout_simple.png" alt="mininet" /></p>

<h3>dpctl</h3>

<p><code>dpctl</code> is a utility that comes with the OpenFlow reference distribution and enables visibility and control over a single switch's flow table</p>

<pre>
# forward packets coming at port 1 to port 2
dpctl add-flow tcp:127.0.0.1:6634 in_port=2,actions=output:3

# check the flow-table
dpctl dump-flows tcp:127.0.0.1:6634
</pre>


<p>Note: the <em>idle_timeout</em> para means that the flow will expire after this many secs if there is no incoming traffic.</p>

<pre>dpctl add-flow tcp:127.0.0.1:6634 in_port=2,idle_timeout=120,actions=output:3</pre>


<h3>iperf</h3>

<p><code>iperf</code> is a command-line tool for checking speeds between two computers.</p>

<pre>
# create an user space network
sudo mn --topo single,3 --controller remote --switch user
# Here we have used ‘user’ with --switch option instead of ‘ovsk’. This loads mininet with user-space switch.

# start a simple controller that acts as a learning switch without installing any flow-entries.
$ controller ptcp:

# test speed
mininet> iperf
# With the user-space switch, packets must cross from user-space to kernel-space and back on every hop, rather than staying in the kernel as they go through the switch. The user-space switch is easier to modify, but slower for simulation.

</pre>


<h2>summary</h2>

<ul>
<li><strong>OpenFlow Interface</strong> : a standard open interface between the OpenFlow controller and the OpenFlow programmable devices (i.e., switches etc)</li>
<li><strong>OpenFlow Controller</strong> : sits <em>above</em> the OpenFlow interface. The OpenFlow reference distribution includes a controller that acts as an Ethernet learning switch in combination with an OpenFlow switch. You'll run it and look at messages being sent.</li>
<li><strong>OpenFlow Switch</strong> : sits <em>below</em> the OpenFlow interface. The OpenFlow reference distribution includes a user-space software switch. <code>Open vSwitch</code> is another software but <em>kernel-based</em> switch.</li>
</ul>

]]></content>
  </entry>
  
</feed>
